// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id        Int      @id @default(autoincrement())
  email     String   @unique
  name      String
  password  String
  createdAt DateTime @default(dbgenerated("CURRENT_TIMESTAMP")) @db.Timestamp()
  role      Role     @default(USER)

  form Form[]

  @@map("users")
}

enum Role {
  USER
  ADMIN
  SUPER_ADMIN
}

model Form {
  id          Int      @id @default(autoincrement())
  createdAt   DateTime @default(dbgenerated("CURRENT_TIMESTAMP")) @db.Timestamp()
  published   Boolean  @default(false)
  name        String   @db.VarChar(225)
  description String   @db.Text
  content     String   @db.Text

  visit       Int @default(0)
  submissions Int @default(0)

  shareURL    String?       @db.Text
  formDetails FormDetails[]

  userId Int

  user User @relation(fields: [userId], references: [id])

  @@map("forms")
}

model FormDetails {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(dbgenerated("CURRENT_TIMESTAMP")) @db.Timestamp()
  formId    Int
  form      Form     @relation(fields: [formId], references: [id])

  content String @db.Text

  @@map("form_details")
}

model Question {
  id        Int        @id @default(autoincrement())
  question  String
  acronim   String
  option_1  String
  option_2  String
  option_3  String
  option_4  String
  status    Boolean    @default(false)
  responses Response[]

  @@map("questions")
}

model Responden {
  id           Int        @id @default(autoincrement())
  name         String
  email        String
  address      String
  phone        String
  age          Int
  education    String
  profession   String
  service_type String
  gender       Gender
  responses    Response[]

  @@map("respondens")
}

model Response {
  id            Int       @id @default(autoincrement())
  question_id   Int
  responden_id  Int
  select_option Int
  created_at    DateTime  @default(dbgenerated("CURRENT_TIMESTAMP")) @db.Timestamp()
  question      Question  @relation(fields: [question_id], references: [id])
  responden     Responden @relation(fields: [responden_id], references: [id])

  @@index([question_id])
  @@index([responden_id])
  @@map("responses")
}

enum Gender {
  MALE
  FEMALE
}
